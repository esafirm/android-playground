/* --------------------------------------------------- */
/* > Jacoco */
/* --------------------------------------------------- */

/**
 *  List of modules that don't require Jacoco
 */
final ignoredByJacoco = [
        'presentation'
]

/**
 *  Apply additional build steps to sub-projects
 */
subprojects { prj ->

    // Apply Jacoco only if the project is not in the ignore list
    if (!ignoredByJacoco.contains(prj.name)) {
        apply plugin: 'jacoco'

        jacoco {
            version "0.8.3"
        }

        tasks.withType(Test) {
            jacoco.includeNoLocationClasses = true
        }

        task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
            final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
            final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
            final mainSrc = "${prj.projectDir}/src/main/java"

            sourceDirectories.setFrom files([mainSrc])
            classDirectories.setFrom files([kotlinTree, javacTree])
            executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
            ])
        }
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion "0.8.3"
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        if (!ignoredByJacoco.contains(prj.name)) {
            projects.add(prj)
        }
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source
    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/full')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/full/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}
