/* --------------------------------------------------- */
/* > Jacoco */
/* --------------------------------------------------- */

/**
 *  Apply additional build steps to sub-projects*/
rootProject.subprojects { project ->

    println("Applying Jacoco to project: ${project.name}")

    // Apply Jacoco only if the project is not in the ignore list
    plugins.apply('jacoco')

    jacoco {
        version "0.8.3"
    }

    project.tasks.withType(Test).configureEach {
        jacoco.includeNoLocationClasses = true
    }

    project.tasks.register("jacocoReport", JacocoReport) {
        group = 'Reporting'
        description = 'Generate Jacoco coverage reports after running tests.'

        reports {
            html.required = true
        }

        final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
        final kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        final javacTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'])
    }
}

jacoco {
    toolVersion "0.8.3"
}


/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects*/
rootProject.tasks.register("jacocoFullReport") {
    group = "Reporting"
    description = "Generates an aggregate report from all subprojects"

    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        if (!ignoredByJacoco.contains(prj.name)) {
            projects.add(prj)
        }
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source
    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/full')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/full/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}
