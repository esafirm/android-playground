// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        maven { url "$rootDir/rn/node_modules/react-native/android" }
        maven { url "$rootDir/rn/node_modules/jsc-android/dist" }
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        flatDir { dirs 'libs' }
    }
}

task printInfo {
    println "Root dir: $rootDir"
    println "Root project: $rootProject.rootDir"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


/* --------------------------------------------------- */
/* > Jacoco */
/* --------------------------------------------------- */

/**
 *  List of modules that don't require Jacoco
 */
def ignoredByJacoco = [
        'presentation'
]

/**
 * module class dirs
 * */
def moduleClassDirs = [
        'app'      : 'build/intermediates/classes/debug',
        'lib_dummy': 'build/intermediates/classes/debug',
]

/**
 * module jacoco exec
 * */
def moduleJacocoExec = [
        'app'      : 'build/jacoco/test.exec',
        'lib_dummy': 'build/jacoco/testDebugUnitTest.exec'
]

/**
 * module excludes
 * */
def moduleExcludes = [
        'app'      : [
                '**/R*.class',
                '**/BuildConfig*'
        ],
        'lib_dummy': [
                '**/R*.class',
                '**/BuildConfig*'
        ]
]

/**
 *  Apply additional build steps to sub-projects
 */
subprojects { prj ->

    // Apply Jacoco only if the project is not in the ignore list
    if (!ignoredByJacoco.contains(prj.name)) {
        apply plugin: 'jacoco'

        jacoco {
            version "0.8.3"
        }

        task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
            final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
            final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
            final mainSrc = "${prj.projectDir}/src/main/java"

            sourceDirectories.setFrom files([mainSrc])
            classDirectories.setFrom files([kotlinTree, javacTree])
            executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
            ])
        }
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion "0.8.3"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
/**
 *  Generate a FileCollection of all projects source files
 */
FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src/main/java")
    }

    return files(dirs)
}

/**
 *  Generate a FileCollection of all projects class files
 */
FileCollection generateClassDirs(Collection projects, moduleClassDirs, moduleExcludes) {
    def tree = fileTree('directory does not exists') // I know it's ugly :)

    projects.each { prj ->
        //noinspection GrReassignedInClosureLocalVar
        tree += fileTree(
                dir: "${prj.name}/${moduleClassDirs[prj.name]}",
                excludes: moduleExcludes[prj.name]
        )
    }

    return tree
}

List<File> listDirRecursive(File rootPath) {
    List<File> result = new ArrayList<>()
    List<File> children = rootPath.listFiles()
    children.each { file ->
        if (file.isFile()) {
            result.add(file)
        } else if (file.isDirectory()) {
            result.addAll(listDirRecursive(file))
        }
    }
    return result
}

void renameClasses(String rootPath) {
    List<File> classes = listDirRecursive(file(rootPath))
    classes.each { file ->
        if (file.name.contains('$$')) {
            file.renameTo(file.path.replace('$$', '$'))
        }
    }
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        if (!ignoredByJacoco.contains(prj.name)) {
            projects.add(prj)
        }
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    additionalSourceDirs.setFrom generateSourceFiles(projects)
    sourceDirectories.setFrom generateSourceFiles(projects)
    classDirectories.setFrom generateClassDirs(projects, moduleClassDirs, moduleExcludes)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/full')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/full/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}
